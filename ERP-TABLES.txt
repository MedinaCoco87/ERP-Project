TABLAS ERP

CREATE TABLE users (
id INTEGER PRIMARY KEY AUTOINCREMENT,
username TEXT NOT NULL UNIQUE,
hashed_pass TEXT NOT NULL,
profile TEXT NOT NULL,
status TEXT NOT NULL)

SQL* CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT NOT NULL UNIQUE, hashed_pass TEXT NOT NULL, profile TEXT NOT NULL, status TEXT NOT NULL);

CREATE TABLE customers (
id INTEGER PRIMARY KEY AUTOINCREMENT,
company_name TEXT NOT NULL,
tax_id TEXT UNIQUE,
address_street TEXT NOT NULL,
address_city TEXT NOT NULL,
address_country TEXT NOT NULL,
payment_condition TEXT NOT NULL,
credit_line FLOAT NOT NULL,
available_credit FLOAT NOT NULL)

SQL* CREATE TABLE customers (id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL, tax_id TEXT UNIQUE, address_street TEXT NOT NULL, address_city TEXT NOT NULL, address_country TEXT NOT NULL, payment_condition TEXT NOT NULL, credit_line FLOAT NOT NULL, available_credit FLOAT)

CREATE TABLE item_categories (
id INTEGER PRIMARY KEY NOT NULL UNIQUE,
description TEXT NOT NULL UNIQUE,
CHECK (id >= 100 AND id <= 999))

SQL* CREATE TABLE item_categories (id INTEGER PRIMARY KEY NOT NULL UNIQUE, description TEXT NOT NULL UNIQUE, CHECK (id >= 100 AND id <= 999));

CREATE TABLE items (
id INTEGER PRIMARY KEY AUTOINCREMENT,
description TEXT NOT NULL,
full_description TEXT,
um INTEGER NOT NULL,
category_id INTEGER NOT NULL,
status TEXT NOT NULL,
FOREIGN KEY (category_id) REFERENCES item_categories (id))

*SQL* CREATE TABLE items (id INTEGER PRIMARY KEY AUTOINCREMENT, description TEXT NOT NULL, full_description TEXT, um INTEGER NOT NULL, category_id INTEGER NOT NULL, status TEXT NOT NULL, FOREIGN KEY (category_id) REFERENCES item_categories (id));

*SQL* ALTER TABLE items ADD status TEXT NOT NULL;

CREATE TABLE stock (
item_id INTEGER NOT NULL UNIQUE,
total_stock INTEGER,
stock_a INTEGER,
stock_q INTEGER,
stock_r INTEGER,
stock_onsale INTEGER,
stock_incoming INTEGER,
FOREIGN KEY (item_id) REFERENCES items (id))

*SQL* CREATE TABLE stock (item_id INTEGER NOT NULL UNIQUE, total_stock INTEGER, stock_a INTEGER, stock_q INTEGER, stock_r INTEGER, stock_onsale INTEGER, stock_incoming INTEGER, FOREIGN KEY (item_id) REFERENCES items (id));

CREATE TABLE stock_moves (
id INTEGER PRIMARY KEY AUTOINCREMENT,
date DATE NOT NULL,
item_id INTEGER NOT NULL,
quantity INTEGER NOT NULL,
move_reference TEXT NOT NULL,
customer_id INTEGER,
user_id INTEGER NOT NULL,
FOREIGN KEY (item_id) REFERENCES items (id),
FOREIGN KEY (customer_id) REFERENCES customers (id))

*SQL* CREATE TABLE stock_moves (id INTEGER PRIMARY KEY AUTOINCREMENT, date DATE NOT NULL, item_id INTEGER NOT NULL, quantity INTEGER NOT NULL, move_reference TEXT NOT NULL, customer_id INTEGER, user_id INTEGER NOT NULL, FOREIGN KEY (item_id) REFERENCES items (id), FOREIGN KEY (customer_id) REFERENCES customers (id));

CREATE TABLE quotes (
id INTEGER PRIMARY KEY AUTOINCREMENT,
date DATE NOT NULL,
customer_id INTEGER,
item_id INTEGER NOT NULL,
quantity INTEGER NOT NULL,
list_price FLOAT NOT NULL,
discount FLOAT,
lead_time INTEGER NOT NULL,
status TEXT,
user_id INTEGER NOT NULL,
FOREIGN KEY (item_id) REFERENCES items (id),
FOREIGN KEY (customer_id) REFERENCES customers (id)
FOREIGN KEY (user_id) REFERENCES users (id))

*SQL* CREATE TABLE quotes (id INTEGER PRIMARY KEY AUTOINCREMENT, date DATE NOT NULL, customer_id INTEGER, item_id INTEGER NOT NULL, quantity INTEGER NOT NULL, list_price FLOAT NOT NULL, discount FLOAT, lead_time INTEGER NOT NULL, status TEXT, user_id INTEGER NOT NULL, FOREIGN KEY (item_id) REFERENCES items (id), FOREIGN KEY (customer_id) REFERENCES customers (id), FOREIGN KEY (user_id) REFERENCES users (id));

CREATE TABLE sales_orders (
id INTEGER PRIMARY KEY AUTOINCREMENT,
date DATE NOT NULL,
customer_id INTEGER,
quote_id INTEGER NOT NULL,
item_id INTEGER NOT NULL,
quantity INTEGER NOT NULL,
list_price FLOAT NOT NULL,
discount FLOAT,
delivery_date DATE NOT NULL,
status TEXT,
user_id INTEGER NOT NULL,
FOREIGN KEY (item_id) REFERENCES items (id),
FOREIGN KEY (customer_id) REFERENCES customers (id)
FOREIGN KEY (user_id) REFERENCES users (id)
FOREIGN KEY (quote_id) REFERENCES quotes (id))

*SQL* CREATE TABLE sales_orders (id INTEGER PRIMARY KEY AUTOINCREMENT, date DATE NOT NULL, customer_id INTEGER, quote_id INTEGER NOT NULL, item_id INTEGER NOT NULL, quantity INTEGER NOT NULL, list_price FLOAT NOT NULL, discount FLOAT, delivery_date DATE NOT NULL, status TEXT, user_id INTEGER NOT NULL, FOREIGN KEY (item_id) REFERENCES items (id), FOREIGN KEY (customer_id) REFERENCES customers (id), FOREIGN KEY (user_id) REFERENCES users (id), FOREIGN KEY (quote_id) REFERENCES quotes (id));

CREATE TABLE invoices (
id INTEGER PRIMARY KEY AUTOINCREMENT,
date DATETIME NOT NULL,
customer_id INTEGER,
sales_order_id INTEGER NOT NULL,
item_id INTEGER NOT NULL,
quantity INTEGER NOT NULL,
net_price FLOAT NOT NULL,
tax_amount FLOAT,
status TEXT NOT NULL,
user_id INTEGER NOT NULL,
FOREIGN KEY (item_id) REFERENCES items (id),
FOREIGN KEY (customer_id) REFERENCES customers (id)
FOREIGN KEY (user_id) REFERENCES users (id)
FOREIGN KEY (sales_orders_id) REFERENCES sales_orders (id))

CREATE TABLE invoices (id INTEGER PRIMARY KEY AUTOINCREMENT, date DATETIME NOT NULL, customer_id INTEGER, sales_order_id INTEGER NOT NULL, item_id INTEGER NOT NULL, quantity INTEGER NOT NULL, net_price FLOAT NOT NULL, tax_amount FLOAT, status TEXT NOT NULL, user_id INTEGER NOT NULL, FOREIGN KEY (item_id) REFERENCES items (id), FOREIGN KEY (customer_id) REFERENCES customers (id), FOREIGN KEY (user_id) REFERENCES users (id), FOREIGN KEY (sales_order_id) REFERENCES sales_orders (id));

-- Update tables add foreign keys to improve relations --

*SQL* DROP TABLE item_categories;
*SQL* CREATE TABLE item_categories (id INTEGER PRIMARY KEY NOT NULL UNIQUE, description TEXT NOT NULL UNIQUE, created_by TEXT, FOREIGN KEY (created_by) REFERENCES users (username) ON DELETE SET NULL, CHECK (id >= 100 AND id <= 999));

*SQL* DROP TABLE customers;
*SQL* CREATE TABLE customers (id INTEGER PRIMARY KEY AUTOINCREMENT, company_name TEXT NOT NULL, tax_id TEXT UNIQUE, address_street TEXT NOT NULL, address_city TEXT NOT NULL, address_country TEXT NOT NULL, payment_condition TEXT NOT NULL, credit_line FLOAT DEFAULT 10000, available_credit FLOAT DEFAULT 10000, created_by TEXT, FOREIGN KEY (created_by) REFERENCES users (username) ON DELETE SET NULL, CHECK (available_credit <= credit_line));

*SQL* DROP TABLE items;
*SQL* CREATE TABLE items (id INTEGER NOT NULL UNIQUE, description TEXT NOT NULL, full_description TEXT, um TEXT NOT NULL DEFAULT UN, category_id INTEGER NOT NULL, status TEXT NOT NULL DEFAULT active, created_by TEXT, FOREIGN KEY (category_id) REFERENCES item_categories (id) ON DELETE RESTRICT, FOREIGN KEY (created_by) REFERENCES users (username) ON DELETE SET NULL);

*SQL* DROP TABLE stock;
*SQL* CREATE TABLE stock (category_id INTEGER NOT NULL, item_id INTEGER NOT NULL UNIQUE, total_stock INTEGER, stock_a INTEGER, stock_q INTEGER, stock_r INTEGER, stock_onsale INTEGER, stock_incoming INTEGER, FOREIGN KEY (category_id) REFERENCES item_categories (id) ON DELETE RESTRICT, FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT);

*SQL* DROP TABLE stock_moves;
*SQL* CREATE TABLE stock_moves (id INTEGER PRIMARY KEY AUTOINCREMENT, date DATE NOT NULL DEFAULT CURRENT_DATE, category_id INTEGER NOT NULL, item_id INTEGER NOT NULL, quantity INTEGER NOT NULL, move_reference TEXT NOT NULL, customer_id INTEGER, invoice_id INTEGER, sales_order_id INTEGER, user_id INTEGER NOT NULL, FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE CASCADE, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE CASCADE, FOREIGN KEY (invoice_id) REFERENCES invoices (id) ON DELETE CASCADE, FOREIGN KEY (sales_order_id) REFERENCES sales_orders (id) ON DELETE CASCADE);

*SQL* DROP TABLE quotes;

CREATE TABLE quotes_header (
    quote_num INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER NOT NULL,
    date DATE DEFAULT CURRENT_DATE,
    total_net_value FLOAT DEFAULT 0.0,
    created_by TEXT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers (id),
    FOREIGN KEY (created_by) REFERENCES users (username))

*SQL* CREATE TABLE quote_header (quote_num INTEGER PRIMARY KEY AUTOINCREMENT, customer_id INTEGER NOT NULL, date DATE DEFAULT CURRENT_DATE, total_net_value FLOAT, created_by TEXT NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id), FOREIGN KEY (created_by) REFERENCES users (username));

CREATE TABLE quote_body (
    quote_num INTEGER NOT NULL,
    line_ref INTEGER,
    item_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    list_price FLOAT,
    discounts FLOAT,
    lead_time INT NOT NULL,
    status TEXT NOT NULL DEFAULT PENDING,
    FOREIGN KEY (quote_num) REFERENCES quotes_headers (quote_num) ON DELETE CASCADE,
    FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT,
    CHECK (quantity > 0 AND list_price >= 0 AND discounts < 1) 
)

*SQL* CREATE TABLE quote_body (quote_num INTEGER NOT NULL, line_ref INTEGER, item_id INTEGER NOT NULL, quantity INTEGER NOT NULL, list_price FLOAT, discounts FLOAT, line_net_total FLOAT, lead_time INT NOT NULL, status TEXT NOT NULL DEFAULT PENDING, FOREIGN KEY (quote_num) REFERENCES quote_header (quote_num) ON DELETE CASCADE, FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT, CHECK (quantity > 0 AND list_price >= 0 AND discounts < 1));

*SQL* DROP TABLE sales_orders;

CREATE TABLE sorder_header (
    order_num INTEGER PRIMARY KEY AUTOINCREMENT,
    date DATE NOT NULL DEFAULT CURRENT_DATE,
    customer_id INTEGER NOT NULL,
    company_name TEXT NOT NULL,
    total_net_value FLOAT,
    status TEXT DEFAULT PENDING,
    created_by TEXT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by) REFERENCES users (username)
)

*SQL* CREATE TABLE sorder_header (order_num INTEGER PRIMARY KEY AUTOINCREMENT, date DATE NOT NULL DEFAULT CURRENT_DATE, customer_id INTEGER NOT NULL, company_name TEXT NOT NULL, total_net_value FLOAT, status TEXT DEFAULT PENDING, created_by TEXT NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE RESTRICT, FOREIGN KEY (created_by) REFERENCES users (username));

CREATE TABLE sorder_body (
    order_num INTEGER NOT NULL,
    line_ref INTEGER,
    item_id INTEGER NOT NULL,
    item_desc TEXT NOT NULL,
    quantity INTEGER NOT NULL,
    net_price FLOAT NOT NULL,
    line_net_total FLOAT NOT NULL,
    delivery_date DATE DEFAULT CURRENT_DATE,
    status TEXT DEFAULT PENDING,
    po_number BLOB,
    quote_num INTEGER,
    FOREIGN KEY (order_num) REFERENCES sorder_header (order_num) ON DELETE CASCADE,
    FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT
)

*SQL* CREATE TABLE sorder_body (order_num INTEGER NOT NULL, line_ref INTEGER, item_id INTEGER NOT NULL, item_desc TEXT NOT NULL, quantity INTEGER NOT NULL, net_price FLOAT NOT NULL, line_net_total FLOAT NOT NULL, delivery_date DATE DEFAULT CURRENT_DATE, status TEXT DEFAULT PENDING, po_number BLOB, quote_num INTEGER, FOREIGN KEY (order_num) REFERENCES sorder_header (order_num) ON DELETE CASCADE, FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT);

*SQL* DROP TABLE invoices

CREATE TABLE invoice_header (
    invoice_num INTEGER PRIMARY KEY AUTOINCREMENT,
    date DATE DEFAULT CURRENT_DATE,
    customer_id INTEGER NOT NULL,
    total_net_value FLOAT NOT NULL,
    total_tax_amount FLOAT,
    payment_terms TEXT DEFAULT COD,
    due_date DATE DEFAULT CURRENT_DATE,
    status TEXT DEFAULT UNPAID,
    created_by TEXT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by) REFERENCES users (username) ON DELETE RESTRICT
)

*SQL* CREATE TABLE invoice_header (invoice_num INTEGER PRIMARY KEY AUTOINCREMENT, date DATE DEFAULT CURRENT_DATE, customer_id INTEGER NOT NULL, total_net_value FLOAT NOT NULL, total_tax_amount FLOAT, payment_terms TEXT DEFAULT COD, due_date DATE DEFAULT CURRENT_DATE, status TEXT DEFAULT UNPAID, created_by TEXT NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE RESTRICT, FOREIGN KEY (created_by) REFERENCES users (username) ON DELETE RESTRICT);

CREATE TABLE invoice_body (
    invoice_num INTEGER NOT NULL,
    line_ref INTEGER,
    sorder_num INTEGER,
    delivery_id INTEGER,
    item_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    net_price FLOAT NOT NULL,
    tax_amount FLOAT NOT NULL,
    FOREIGN KEY (invoice_num) REFERENCES invoice_header (invoice_num) ON DELETE CASCADE,
    FOREIGN KEY (sorder_num) REFERENCES sorder_body (order_num) ON DELETE RESTRICT,
    FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT,
    FOREIGN KEY (delivery_id) REFERENCES delivery_body (id) ON DELETE RESTRICT,
    CHECK (quantity > 0 AND net_price > 0 AND tax_amount >= 0)
)

*SQL* CREATE TABLE invoice_body (invoice_num INTEGER NOT NULL, line_ref INTEGER, sorder_num INTEGER, item_id INTEGER NOT NULL, quantity INTEGER NOT NULL, net_price FLOAT NOT NULL, tax_amount FLOAT NOT NULL, FOREIGN KEY (invoice_num) REFERENCES invoice_header (invoice_num) ON DELETE CASCADE, FOREIGN KEY (sorder_num) REFERENCES sorder_body (order_num) ON DELETE RESTRICT, FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT, CHECK (quantity > 0 AND net_price > 0 AND tax_amount >= 0));

CREATE TABLE item_categories (
    id INTEGER PRIMARY KEY NOT NULL UNIQUE, 
    description TEXT NOT NULL UNIQUE,
    counter INTEGER DEFAULT 1,
    created_by TEXT, 
    FOREIGN KEY (created_by) REFERENCES users (username) ON DELETE SET NULL, 
    CHECK (id >= 100 AND id <= 999));

*SQL* CREATE TABLE item_categories (id INTEGER PRIMARY KEY NOT NULL UNIQUE, description TEXT NOT NULL UNIQUE, counter INTEGER DEFAULT 1, created_by TEXT, FOREIGN KEY (created_by) REFERENCES users (username) ON DELETE SET NULL, CHECK (id >= 100 AND id <= 999));

*SQL* DROP TABLE stock;
*SQL* CREATE TABLE stock (category_id INTEGER NOT NULL, item_id INTEGER NOT NULL UNIQUE, item_description TEXT NOT NULL, stock_total INTEGER, stock_approved INTEGER, stock_in_qc INTEGER, stock_rejected INTEGER, stock_onsale INTEGER, stock_incoming INTEGER, stock_available INTEGER, FOREIGN KEY (category_id) REFERENCES item_categories (id) ON DELETE RESTRICT, FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT);

CREATE TRIGGER stock_creation AFTER INSERT ON items
BEGIN
INSERT INTO stock(category_id, item_id, item_description, stock_total, stock_approved, stock_in_qc, stock_rejected, stock_onsale, stock_incoming, stock_available)
VALUES(new.category_id, new.id, new.description, 0, 0, 0, 0, 0, 0, 0);
END;

*SQL* DROP TABLE stock_moves;
CREATE TABLE stock_moves (
    id INTEGER PRIMARY KEY AUTOINCREMENT, 
    date DATE DEFAULT CURRENT_DATE,  
    item_id INTEGER NOT NULL,
    item_description TEXT NOT NULL,
    quantity INTEGER NOT NULL,
    stock_bef INTEGER NOT NULL,
    stock_aft INTEGER NOT NULL, 
    reference TEXT NOT NULL, 
    customer_id INTEGER, 
    invoice_num INTEGER,  
    user_id INTEGER NOT NULL, 
    FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE CASCADE, 
    FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE CASCADE, 
    FOREIGN KEY (invoice_id) REFERENCES invoice_header (invoice_num) ON DELETE CASCADE
    );
*SQL* CREATE TABLE stock_moves (id INTEGER PRIMARY KEY AUTOINCREMENT, date DATE DEFAULT CURRENT_DATE, item_id INTEGER NOT NULL, item_description TEXT NOT NULL, quantity INTEGER NOT NULL, stock_bef INTEGER NOT NULL, stock_aft INTEGER NOT NULL, reference TEXT NOT NULL, customer_id INTEGER, invoice_id INTEGER, user_id INTEGER NOT NULL, FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE CASCADE, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE CASCADE, FOREIGN KEY (invoice_id) REFERENCES invoice_header (invoice_num) ON DELETE CASCADE);

*SQL* DROP TABLE invoice_body
CREATE TABLE invoice_body (
    invoice_num INTEGER NOT NULL,
    line_ref INTEGER,
    sorder_num INTEGER,
    delivery_id INTEGER,
    item_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    net_price FLOAT NOT NULL,
    tax_amount FLOAT NOT NULL,
    FOREIGN KEY (invoice_num) REFERENCES invoice_header (invoice_num) ON DELETE CASCADE,
    FOREIGN KEY (sorder_num) REFERENCES sorder_header (order_num) ON DELETE RESTRICT,
    FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT,
    FOREIGN KEY (delivery_id) REFERENCES delivery_header (id) ON DELETE RESTRICT,
    CHECK (quantity > 0 AND net_price > 0 AND tax_amount >= 0)
)

*SQL* CREATE TABLE invoice_body (invoice_num INTEGER NOT NULL, line_ref INTEGER, sorder_num INTEGER, delivery_id INTEGER, item_id INTEGER NOT NULL, quantity INTEGER NOT NULL, net_price FLOAT NOT NULL, tax_amount FLOAT NOT NULL, FOREIGN KEY (invoice_num) REFERENCES invoice_header (invoice_num) ON DELETE CASCADE, FOREIGN KEY (sorder_num) REFERENCES sorder_header (order_num) ON DELETE RESTRICT, FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT, FOREIGN KEY (delivery_id) REFERENCES delivery_header (id) ON DELETE RESTRICT, CHECK (quantity > 0 AND net_price > 0 AND tax_amount >= 0));

CREATE TABLE delivery_header (
    date DATE DEFAULT CURRENT_DATE,
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER,
    total_net_value FLOAT,
    delivery_address BLOB,
    created_by TEXT,
    status TEXT DEFAULT CREATED,
    invoice_num INTEGER,
    FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE RESTRICT,
    FOREIGN KEY (created_by) REFERENCES users (username) ON DELETE RESTRICT,
    FOREIGN KEY (invoice_num) REFERENCES invoice_header (invoice_num) ON DELETE RESTRICT,
)

CREATE TABLE delivery_body (
    id INTEGER NOT NULL,
    item_id INTEGER NOT NULL,
    item_description TEXT NOT NULL,
    line_ref INTEGER,
    quantity INTEGER NOT NULL,
    sorder_num INTEGER NOT NULL,
    net_price FLOAT NOT NULL,
    FOREIGN KEY (id) REFERENCES delivery_header (id) ON DELETE CASCADE,
    FOREIGN KEY (item_id) REFERENCES item (id) ON DELETE RESTRICT,
    FOREIGN KEY (sorder_num) REFERENCES sorder_body (order_num) ON DELETE RESTRICT
)

CREATE TABLE delivery_header (date DATE DEFAULT CURRENT_DATE, id INTEGER PRIMARY KEY AUTOINCREMENT, customer_id INTEGER, total_net_value FLOAT, delivery_address BLOB, created_by TEXT, status TEXT DEFAULT CREATED, invoice_num INTEGER, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE RESTRICT, FOREIGN KEY (created_by) REFERENCES users (username) ON DELETE RESTRICT, FOREIGN KEY (invoice_num) REFERENCES invoice_header (invoice_num) ON DELETE RESTRICT);

CREATE TABLE delivery_body (id INTEGER NOT NULL, item_id INTEGER NOT NULL, line_ref INTEGER, quantity INTEGER NOT NULL, sorder_num INTEGER NOT NULL, net_price FLOAT NOT NULL, FOREIGN KEY (id) REFERENCES delivery_header (id) ON DELETE CASCADE, FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT, FOREIGN KEY (sorder_num) REFERENCES sorder_header (order_num) ON DELETE RESTRICT);

*SQL* CREATE TABLE invoice_header (invoice_num INTEGER PRIMARY KEY AUTOINCREMENT, date DATE DEFAULT CURRENT_DATE, customer_id INTEGER NOT NULL, total_net_value FLOAT NOT NULL, total_tax_amount FLOAT, payment_terms TEXT DEFAULT COD, due_date DATE DEFAULT CURRENT_DATE, status TEXT DEFAULT UNPAID, created_by TEXT NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id) ON DELETE RESTRICT, FOREIGN KEY (created_by) REFERENCES users (username) ON DELETE RESTRICT);
*SQL* CREATE TABLE invoice_body (invoice_num INTEGER NOT NULL, line_ref INTEGER, sorder_num INTEGER, delivery_id INTEGER, item_id INTEGER NOT NULL, quantity INTEGER NOT NULL, net_price FLOAT NOT NULL, tax_amount FLOAT NOT NULL, FOREIGN KEY (invoice_num) REFERENCES invoice_header (invoice_num) ON DELETE CASCADE, FOREIGN KEY (sorder_num) REFERENCES sorder_header (order_num) ON DELETE RESTRICT, FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT, FOREIGN KEY (delivery_id) REFERENCES delivery_header (id) ON DELETE RESTRICT, CHECK (quantity > 0 AND net_price > 0 AND tax_amount >= 0));

DROP TABLE quote_body;
DROP TABLE quote_header;

CREATE TABLE quote_header (
    quote_num INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER NOT NULL,
    company_name TEXT NOT NULL,
    date DATE DEFAULT CURRENT_DATE,
    total_net_value FLOAT DEFAULT 0.0,
    status TEXT DEFAULT PENDING,
    created_by TEXT NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES customers (id),
    FOREIGN KEY (created_by) REFERENCES users (username))

*SQL* CREATE TABLE quote_header (quote_num INTEGER PRIMARY KEY AUTOINCREMENT, customer_id INTEGER NOT NULL, company_name TEXT NOT NULL, date DATE DEFAULT CURRENT_DATE, total_net_value FLOAT DEFAULT 0.0, status TEXT DEFAULT PENDING, created_by TEXT NOT NULL, FOREIGN KEY (customer_id) REFERENCES customers (id), FOREIGN KEY (created_by) REFERENCES users (username));

CREATE TABLE quote_body (
    quote_num INTEGER NOT NULL, 
    line_ref INTEGER, 
    item_id INTEGER NOT NULL, 
    item_desc TEXT NOT NULL, 
    quantity INTEGER NOT NULL, 
    list_price FLOAT,
    discount FLOAT,
    net_price FLOAT, 
    line_net_total FLOAT NOT NULL,
    lead_time INT NOT NULL, 
    status TEXT NOT NULL DEFAULT PENDING, 
    FOREIGN KEY (quote_num) REFERENCES quote_header (quote_num) ON DELETE CASCADE, 
    FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT, 
    CHECK (quantity > 0 AND list_price >= 0 AND discounts < 1)
    );

*SQL* CREATE TABLE quote_body (quote_num INTEGER NOT NULL, line_ref INTEGER, item_id INTEGER NOT NULL, item_desc TEXT NOT NULL, quantity INTEGER NOT NULL, list_price FLOAT, discount FLOAT, net_price FLOAT, line_net_total FLOAT NOT NULL, lead_time INT NOT NULL, status TEXT NOT NULL DEFAULT PENDING, FOREIGN KEY (quote_num) REFERENCES quote_header (quote_num) ON DELETE CASCADE, FOREIGN KEY (item_id) REFERENCES items (id) ON DELETE RESTRICT, CHECK (quantity > 0 AND list_price >= 0 AND discount < 1));